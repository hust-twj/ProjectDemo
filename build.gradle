// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: GreatPlugin

ext {
    kotlin_version = '1.3.50'
    dagger_version = '2.26'
}

buildscript {
    repositories {
        google()
        //jcenter()
        maven {
            url "https://jitpack.io"
        }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }

//        maven {
//            url "/Users/tangwenjing/AndroidStudioProjects/ZademoNew/gradle_plugin/repo"
//        }
    }
    dependencies {
        println("hahahahha: " + {ext.kotlin_version} )
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
        classpath "com.husttwj.plugin:webp_plugin:1.0.3"

        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.10'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        classpath 'me.ele:lancet-plugin:1.0.6'
    }
}

allprojects {
    repositories {
        google()
        //jcenter()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task find {
    println "start"

    String path = projectDir.absolutePath + File.separator + "app/src/main/res/drawable-xxhdpi"
    if (!file(path).exists()) {
        println "不存在"
    } else {
        File[] dir = file(path).listFiles(new FilenameFilter() {
            @Override
            boolean accept(File file, String s) {
                File f = new File(file.getPath() + File.separator + s)

                //打印出大小大于20k的图片
                if ((s.endsWith(".png") || s.endsWith(".jpg")) && f.length() > 20 * 1024) {
                    println f.length() + "  " + s
                }

                if (s.endsWith(".png") || s.endsWith(".jpg") || f.isDirectory()) {
                    return true
                }
                return false
            }
        })
    }


}

class GreetingPluginExtension {
    String message = "hello greating"

}

class GreatPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {

        def extension = project.extensions.create("greatPlugin", GreetingPluginExtension)

        project.task("hello") {
            doLast {
                println(extension.message)
            }
        }
    }

}


//DSL作用域中重新赋值
greatPlugin {
    message = "dynamic message"
}

//gradle.taskGraph.whenReady { taskGraph ->
//    taskGraph.afterTask { task ->
//        println "=========whenReady : taskGraph : afterTask : ${task.getName()}=========="
//    }
//}

println("-------: " + gradle.startParameter.toString())

gradle.taskGraph.addTaskExecutionGraphListener(new TaskExecutionGraphListener() {
    @Override
    void graphPopulated(TaskExecutionGraph graph) {
        println "111=========  "  +graph.allTasks.size() + "   " + graph.allTasks.toString()
    }
})

gradle.addListener(new TaskExecutionListener(){
    @Override
    void beforeExecute(Task task) {
      //  println("==============" + task.name)

    }

    @Override
    void afterExecute(Task task, TaskState taskState) {

    }
})

gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        println("222==============" + gradle.taskGraph.allTasks.size())

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {

    }
})